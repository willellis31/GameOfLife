@model WebGameOfLife.UserTemplate

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<hr />

@using (Html.BeginForm("Create", "UserTemplates", FormMethod.Post, new { @onsubmit = "validate()" }))
{
    @Html.AntiForgeryToken()
    <div class="row">
        <div class="col-lg-4">
            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.DropDownList("UserID", null, htmlAttributes: new { @style = "display:none;", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Width, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Width, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Width, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Cells, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <table>
                            <tr>
                                <td>
                                    <span id="count"></span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.EditorFor(model => model.Cells, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Cells, "", new { @class = "text-danger" })
                                </td>
                            </tr>
                        </table>
                    </div>
                </div>
                <input id="valid" type="hidden" value="false" />
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <h3>Creating a Template</h3>
            <p>
                Create a template as a seed for a game.
            </p>
            <p>
                A template can be any rectangle with a maximum height of 10 and maximum width of 10.
                Then using the letters 'x' and 'o' you can create a grid of alive and dead cells.
                A 'x' represents a dead cell, and a 'o' represents a live cell.
            </p>
        </div>
    </div>
    

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
@section scripts{
    <script>
        
        //this will have a countdown to how many characters remaining you need to finish the template

        setInterval(function () {
            var v = $('#valid');
            if (($('#Height').val() > 0) && ($('#Width').val() > 0))
            {
                var count = $('#Height').val() * $('#Width').val() - $("#Cells").val().length;
                if($('#Height').val() * $('#Width').val() < 101)
                {
                    if (count == 0)
                    {
                        $('#count').text("Correct amount of characters");
                        $('#Cells').css("box-shadow", 'inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(64, 227, 47,0.6)');
                        v.val(true);
                    }
                    
                    else if (count < 0)
                    {
                        $('#Cells').css("box-shadow", 'none');
                        $('#count').text("Oops! " + count * (-1) + " too many characters");
                        v.val(false);
                    }
                    
                    else
                    {
                        $('#Cells').css("box-shadow", 'none');
                        $('#count').text(count + " more characters needed");
                        v.val(false);
                    }
                }
                else {
                    $('#count').text("Maximum template size is 10 x 10");
                    v.val(false);
                }                  
            }
            else {
                v.val(false);
            }

        }, 700);

        function validate()
        {
            if ($('#valid').val() == true)
                return true;
            else
                return false;
        }
    </script>
    }